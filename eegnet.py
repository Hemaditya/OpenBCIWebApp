# -*- coding: utf-8 -*-
"""EEGNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/167EgzR3JNHGlEk7L7lZJLDMM9Di01t-n
"""

import torch

import torch.nn as nn

# Depthwise convolutions
class Depth2d(nn.Module):
  def __init__(self,nin,nout):
    super(Depth2d,self).__init__()
    
    self.depthwise = nn.Conv2d(nin,nin,(1,5),padding=(0,2),groups=nin)
    self.pointwise = nn.Conv2d(nin,nout,(1,1))
    
  def forward(self,x):
    x = self.depthwise(x)
    x = self.pointwise(x)
    
    return x

class NN(nn.Module):
  
  def __init__(self):
    super(NN,self).__init__()
    
    self.conv1 = nn.Conv2d(1,16,(1,125),padding=(0,62))
    self.bn1 = nn.BatchNorm2d(16)
    self.depth1 = Depth2d(16,32)
    self.bn2 = nn.BatchNorm2d(32)
    self.relu = nn.ReLU()
    self.avgpool1 = nn.AvgPool2d((1,4))
    self.d1 = nn.Dropout(0.25)
    self.spa1 = nn.Conv2d(32,32,(1,1))
    self.spa2 = nn.Conv2d(32,64,(1,125),padding=(0,62))
    self.bn3 = nn.BatchNorm2d(64)
    self.relu = nn.ReLU()
    self.avgpool2 = nn.AvgPool2d((1,8))
    self.d2 = nn.Dropout(0.25)
    self.lin1 = nn.Linear(64*1*7,3)
    self.softmax = nn.Softmax()
    
  def forward(self, x):
    x = self.conv1(x)
    x = self.bn1(x)    
    x = self.depth1(x)
    x = self.bn2(x)
    x = self.relu(x)
    x = self.avgpool1(x)
    x = self.d1(x)
    x = self.spa1(x)
    x = self.spa2(x)
    x = self.bn3(x)
    x = self.relu(x)
    x = self.avgpool2(x)
    x = self.d2(x)
    x = x.reshape(x.shape[0],-1)
    x = self.relu(self.lin1(x))
    #x = self.softmax(x)
    
    return x

